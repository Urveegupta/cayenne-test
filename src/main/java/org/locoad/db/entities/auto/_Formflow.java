package org.locoad.db.entities.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;
import org.locoad.db.entities.ActionPermission;
import org.locoad.db.entities.Dbrole;
import org.locoad.db.entities.Dbstatus;
import org.locoad.db.entities.Form;
import org.locoad.db.entities.Formfield;
import org.locoad.db.entities.StateTransition;
import org.locoad.db.entities.User;

/**
 * Class _Formflow was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Formflow extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String FF_ID_PK_COLUMN = "ff_id";

    public static final Property<List<ActionPermission>> ACTION_PERMISSIONS = Property.create("actionPermissions", List.class);
    public static final Property<List<Dbrole>> DBROLES = Property.create("dbroles", List.class);
    public static final Property<List<Dbstatus>> DBSTATUSES = Property.create("dbstatuses", List.class);
    public static final Property<List<Formfield>> FORMFIELDS = Property.create("formfields", List.class);
    public static final Property<List<Form>> FORMS = Property.create("forms", List.class);
    public static final Property<List<StateTransition>> STATE_TRANSITIONS = Property.create("stateTransitions", List.class);
    public static final Property<User> USER = Property.create("user", User.class);


    protected Object actionPermissions;
    protected Object dbroles;
    protected Object dbstatuses;
    protected Object formfields;
    protected Object forms;
    protected Object stateTransitions;
    protected Object user;

    public void addToActionPermissions(ActionPermission obj) {
        addToManyTarget("actionPermissions", obj, true);
    }

    public void removeFromActionPermissions(ActionPermission obj) {
        removeToManyTarget("actionPermissions", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<ActionPermission> getActionPermissions() {
        return (List<ActionPermission>)readProperty("actionPermissions");
    }

    public void addToDbroles(Dbrole obj) {
        addToManyTarget("dbroles", obj, true);
    }

    public void removeFromDbroles(Dbrole obj) {
        removeToManyTarget("dbroles", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Dbrole> getDbroles() {
        return (List<Dbrole>)readProperty("dbroles");
    }

    public void addToDbstatuses(Dbstatus obj) {
        addToManyTarget("dbstatuses", obj, true);
    }

    public void removeFromDbstatuses(Dbstatus obj) {
        removeToManyTarget("dbstatuses", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Dbstatus> getDbstatuses() {
        return (List<Dbstatus>)readProperty("dbstatuses");
    }

    public void addToFormfields(Formfield obj) {
        addToManyTarget("formfields", obj, true);
    }

    public void removeFromFormfields(Formfield obj) {
        removeToManyTarget("formfields", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Formfield> getFormfields() {
        return (List<Formfield>)readProperty("formfields");
    }

    public void addToForms(Form obj) {
        addToManyTarget("forms", obj, true);
    }

    public void removeFromForms(Form obj) {
        removeToManyTarget("forms", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Form> getForms() {
        return (List<Form>)readProperty("forms");
    }

    public void addToStateTransitions(StateTransition obj) {
        addToManyTarget("stateTransitions", obj, true);
    }

    public void removeFromStateTransitions(StateTransition obj) {
        removeToManyTarget("stateTransitions", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<StateTransition> getStateTransitions() {
        return (List<StateTransition>)readProperty("stateTransitions");
    }

    public void setUser(User user) {
        setToOneTarget("user", user, true);
    }

    public User getUser() {
        return (User)readProperty("user");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "actionPermissions":
                return this.actionPermissions;
            case "dbroles":
                return this.dbroles;
            case "dbstatuses":
                return this.dbstatuses;
            case "formfields":
                return this.formfields;
            case "forms":
                return this.forms;
            case "stateTransitions":
                return this.stateTransitions;
            case "user":
                return this.user;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "actionPermissions":
                this.actionPermissions = val;
                break;
            case "dbroles":
                this.dbroles = val;
                break;
            case "dbstatuses":
                this.dbstatuses = val;
                break;
            case "formfields":
                this.formfields = val;
                break;
            case "forms":
                this.forms = val;
                break;
            case "stateTransitions":
                this.stateTransitions = val;
                break;
            case "user":
                this.user = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.actionPermissions);
        out.writeObject(this.dbroles);
        out.writeObject(this.dbstatuses);
        out.writeObject(this.formfields);
        out.writeObject(this.forms);
        out.writeObject(this.stateTransitions);
        out.writeObject(this.user);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.actionPermissions = in.readObject();
        this.dbroles = in.readObject();
        this.dbstatuses = in.readObject();
        this.formfields = in.readObject();
        this.forms = in.readObject();
        this.stateTransitions = in.readObject();
        this.user = in.readObject();
    }

}
