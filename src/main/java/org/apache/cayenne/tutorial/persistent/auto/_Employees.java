package org.apache.cayenne.tutorial.persistent.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDate;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;
import org.apache.cayenne.tutorial.persistent.DeptEmp;
import org.apache.cayenne.tutorial.persistent.DeptManager;
import org.apache.cayenne.tutorial.persistent.Salaries;
import org.apache.cayenne.tutorial.persistent.Titles;

/**
 * Class _Employees was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Employees extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String EMP_NO_PK_COLUMN = "emp_no";

    public static final Property<LocalDate> BIRTH_DATE = Property.create("birthDate", LocalDate.class);
    public static final Property<String> FIRST_NAME = Property.create("firstName", String.class);
    public static final Property<String> GENDER = Property.create("gender", String.class);
    public static final Property<LocalDate> HIRE_DATE = Property.create("hireDate", LocalDate.class);
    public static final Property<String> LAST_NAME = Property.create("lastName", String.class);
    public static final Property<List<DeptEmp>> DEPT_EMPS = Property.create("deptEmps", List.class);
    public static final Property<List<DeptManager>> DEPT_MANAGERS = Property.create("deptManagers", List.class);
    public static final Property<List<Salaries>> SALARIESES = Property.create("salarieses", List.class);
    public static final Property<List<Titles>> TITLESES = Property.create("titleses", List.class);

    protected LocalDate birthDate;
    protected String firstName;
    protected String gender;
    protected LocalDate hireDate;
    protected String lastName;

    protected Object deptEmps;
    protected Object deptManagers;
    protected Object salarieses;
    protected Object titleses;

    public void setBirthDate(LocalDate birthDate) {
        beforePropertyWrite("birthDate", this.birthDate, birthDate);
        this.birthDate = birthDate;
    }

    public LocalDate getBirthDate() {
        beforePropertyRead("birthDate");
        return this.birthDate;
    }

    public void setFirstName(String firstName) {
        beforePropertyWrite("firstName", this.firstName, firstName);
        this.firstName = firstName;
    }

    public String getFirstName() {
        beforePropertyRead("firstName");
        return this.firstName;
    }

    public void setGender(String gender) {
        beforePropertyWrite("gender", this.gender, gender);
        this.gender = gender;
    }

    public String getGender() {
        beforePropertyRead("gender");
        return this.gender;
    }

    public void setHireDate(LocalDate hireDate) {
        beforePropertyWrite("hireDate", this.hireDate, hireDate);
        this.hireDate = hireDate;
    }

    public LocalDate getHireDate() {
        beforePropertyRead("hireDate");
        return this.hireDate;
    }

    public void setLastName(String lastName) {
        beforePropertyWrite("lastName", this.lastName, lastName);
        this.lastName = lastName;
    }

    public String getLastName() {
        beforePropertyRead("lastName");
        return this.lastName;
    }

    public void addToDeptEmps(DeptEmp obj) {
        addToManyTarget("deptEmps", obj, true);
    }

    public void removeFromDeptEmps(DeptEmp obj) {
        removeToManyTarget("deptEmps", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<DeptEmp> getDeptEmps() {
        return (List<DeptEmp>)readProperty("deptEmps");
    }

    public void addToDeptManagers(DeptManager obj) {
        addToManyTarget("deptManagers", obj, true);
    }

    public void removeFromDeptManagers(DeptManager obj) {
        removeToManyTarget("deptManagers", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<DeptManager> getDeptManagers() {
        return (List<DeptManager>)readProperty("deptManagers");
    }

    public void addToSalarieses(Salaries obj) {
        addToManyTarget("salarieses", obj, true);
    }

    public void removeFromSalarieses(Salaries obj) {
        removeToManyTarget("salarieses", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Salaries> getSalarieses() {
        return (List<Salaries>)readProperty("salarieses");
    }

    public void addToTitleses(Titles obj) {
        addToManyTarget("titleses", obj, true);
    }

    public void removeFromTitleses(Titles obj) {
        removeToManyTarget("titleses", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Titles> getTitleses() {
        return (List<Titles>)readProperty("titleses");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "birthDate":
                return this.birthDate;
            case "firstName":
                return this.firstName;
            case "gender":
                return this.gender;
            case "hireDate":
                return this.hireDate;
            case "lastName":
                return this.lastName;
            case "deptEmps":
                return this.deptEmps;
            case "deptManagers":
                return this.deptManagers;
            case "salarieses":
                return this.salarieses;
            case "titleses":
                return this.titleses;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "birthDate":
                this.birthDate = (LocalDate)val;
                break;
            case "firstName":
                this.firstName = (String)val;
                break;
            case "gender":
                this.gender = (String)val;
                break;
            case "hireDate":
                this.hireDate = (LocalDate)val;
                break;
            case "lastName":
                this.lastName = (String)val;
                break;
            case "deptEmps":
                this.deptEmps = val;
                break;
            case "deptManagers":
                this.deptManagers = val;
                break;
            case "salarieses":
                this.salarieses = val;
                break;
            case "titleses":
                this.titleses = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.birthDate);
        out.writeObject(this.firstName);
        out.writeObject(this.gender);
        out.writeObject(this.hireDate);
        out.writeObject(this.lastName);
        out.writeObject(this.deptEmps);
        out.writeObject(this.deptManagers);
        out.writeObject(this.salarieses);
        out.writeObject(this.titleses);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.birthDate = (LocalDate)in.readObject();
        this.firstName = (String)in.readObject();
        this.gender = (String)in.readObject();
        this.hireDate = (LocalDate)in.readObject();
        this.lastName = (String)in.readObject();
        this.deptEmps = in.readObject();
        this.deptManagers = in.readObject();
        this.salarieses = in.readObject();
        this.titleses = in.readObject();
    }

}
