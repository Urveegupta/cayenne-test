package org.apache.cayenne.tutorial.persistent.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDate;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _DeptEmpLatestDate was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _DeptEmpLatestDate extends BaseDataObject {

    private static final long serialVersionUID = 1L; 


    public static final Property<Integer> EMP_NO = Property.create("empNo", Integer.class);
    public static final Property<LocalDate> FROM_DATE = Property.create("fromDate", LocalDate.class);
    public static final Property<LocalDate> TO_DATE = Property.create("toDate", LocalDate.class);

    protected int empNo;
    protected LocalDate fromDate;
    protected LocalDate toDate;


    public void setEmpNo(int empNo) {
        beforePropertyWrite("empNo", this.empNo, empNo);
        this.empNo = empNo;
    }

    public int getEmpNo() {
        beforePropertyRead("empNo");
        return this.empNo;
    }

    public void setFromDate(LocalDate fromDate) {
        beforePropertyWrite("fromDate", this.fromDate, fromDate);
        this.fromDate = fromDate;
    }

    public LocalDate getFromDate() {
        beforePropertyRead("fromDate");
        return this.fromDate;
    }

    public void setToDate(LocalDate toDate) {
        beforePropertyWrite("toDate", this.toDate, toDate);
        this.toDate = toDate;
    }

    public LocalDate getToDate() {
        beforePropertyRead("toDate");
        return this.toDate;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "empNo":
                return this.empNo;
            case "fromDate":
                return this.fromDate;
            case "toDate":
                return this.toDate;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "empNo":
                this.empNo = val == null ? 0 : (int)val;
                break;
            case "fromDate":
                this.fromDate = (LocalDate)val;
                break;
            case "toDate":
                this.toDate = (LocalDate)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeInt(this.empNo);
        out.writeObject(this.fromDate);
        out.writeObject(this.toDate);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.empNo = in.readInt();
        this.fromDate = (LocalDate)in.readObject();
        this.toDate = (LocalDate)in.readObject();
    }

}
