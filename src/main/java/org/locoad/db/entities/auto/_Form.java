package org.locoad.db.entities.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;
import org.locoad.db.entities.ActionPermission;
import org.locoad.db.entities.Formfield;
import org.locoad.db.entities.Formflow;
import org.locoad.db.entities.StateTransition;

/**
 * Class _Form was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Form extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String FORM_ID_PK_COLUMN = "form_id";

    public static final Property<String> FORM_NAME = Property.create("formName", String.class);
    public static final Property<List<ActionPermission>> ACTION_PERMISSIONS = Property.create("actionPermissions", List.class);
    public static final Property<Formflow> FF = Property.create("ff", Formflow.class);
    public static final Property<List<Formfield>> FORMFIELDS = Property.create("formfields", List.class);
    public static final Property<List<StateTransition>> STATE_TRANSITIONS = Property.create("stateTransitions", List.class);

    protected String formName;

    protected Object actionPermissions;
    protected Object ff;
    protected Object formfields;
    protected Object stateTransitions;

    public void setFormName(String formName) {
        beforePropertyWrite("formName", this.formName, formName);
        this.formName = formName;
    }

    public String getFormName() {
        beforePropertyRead("formName");
        return this.formName;
    }

    public void addToActionPermissions(ActionPermission obj) {
        addToManyTarget("actionPermissions", obj, true);
    }

    public void removeFromActionPermissions(ActionPermission obj) {
        removeToManyTarget("actionPermissions", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<ActionPermission> getActionPermissions() {
        return (List<ActionPermission>)readProperty("actionPermissions");
    }

    public void setFf(Formflow ff) {
        setToOneTarget("ff", ff, true);
    }

    public Formflow getFf() {
        return (Formflow)readProperty("ff");
    }

    public void addToFormfields(Formfield obj) {
        addToManyTarget("formfields", obj, true);
    }

    public void removeFromFormfields(Formfield obj) {
        removeToManyTarget("formfields", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Formfield> getFormfields() {
        return (List<Formfield>)readProperty("formfields");
    }

    public void addToStateTransitions(StateTransition obj) {
        addToManyTarget("stateTransitions", obj, true);
    }

    public void removeFromStateTransitions(StateTransition obj) {
        removeToManyTarget("stateTransitions", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<StateTransition> getStateTransitions() {
        return (List<StateTransition>)readProperty("stateTransitions");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "formName":
                return this.formName;
            case "actionPermissions":
                return this.actionPermissions;
            case "ff":
                return this.ff;
            case "formfields":
                return this.formfields;
            case "stateTransitions":
                return this.stateTransitions;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "formName":
                this.formName = (String)val;
                break;
            case "actionPermissions":
                this.actionPermissions = val;
                break;
            case "ff":
                this.ff = val;
                break;
            case "formfields":
                this.formfields = val;
                break;
            case "stateTransitions":
                this.stateTransitions = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.formName);
        out.writeObject(this.actionPermissions);
        out.writeObject(this.ff);
        out.writeObject(this.formfields);
        out.writeObject(this.stateTransitions);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.formName = (String)in.readObject();
        this.actionPermissions = in.readObject();
        this.ff = in.readObject();
        this.formfields = in.readObject();
        this.stateTransitions = in.readObject();
    }

}
