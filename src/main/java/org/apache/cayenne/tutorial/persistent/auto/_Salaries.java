package org.apache.cayenne.tutorial.persistent.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDate;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;
import org.apache.cayenne.tutorial.persistent.Employees;

/**
 * Class _Salaries was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Salaries extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String EMP_NO_PK_COLUMN = "emp_no";
    public static final String FROM_DATE_PK_COLUMN = "from_date";

    public static final Property<Integer> SALARY = Property.create("salary", Integer.class);
    public static final Property<LocalDate> TO_DATE = Property.create("toDate", LocalDate.class);
    public static final Property<Employees> EMPLOYEES = Property.create("employees", Employees.class);

    protected int salary;
    protected LocalDate toDate;

    protected Object employees;

    public void setSalary(int salary) {
        beforePropertyWrite("salary", this.salary, salary);
        this.salary = salary;
    }

    public int getSalary() {
        beforePropertyRead("salary");
        return this.salary;
    }

    public void setToDate(LocalDate toDate) {
        beforePropertyWrite("toDate", this.toDate, toDate);
        this.toDate = toDate;
    }

    public LocalDate getToDate() {
        beforePropertyRead("toDate");
        return this.toDate;
    }

    public void setEmployees(Employees employees) {
        setToOneTarget("employees", employees, true);
    }

    public Employees getEmployees() {
        return (Employees)readProperty("employees");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "salary":
                return this.salary;
            case "toDate":
                return this.toDate;
            case "employees":
                return this.employees;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "salary":
                this.salary = val == null ? 0 : (int)val;
                break;
            case "toDate":
                this.toDate = (LocalDate)val;
                break;
            case "employees":
                this.employees = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeInt(this.salary);
        out.writeObject(this.toDate);
        out.writeObject(this.employees);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.salary = in.readInt();
        this.toDate = (LocalDate)in.readObject();
        this.employees = in.readObject();
    }

}
