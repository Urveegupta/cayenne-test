package org.locoad.db.entities.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;
import org.locoad.db.entities.Action;
import org.locoad.db.entities.Form;
import org.locoad.db.entities.Formflow;

/**
 * Class _ActionPermission was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _ActionPermission extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String PERMISSION_ID_PK_COLUMN = "permission_id";

    public static final Property<Integer> IN_STATUS_ID = Property.create("inStatusId", Integer.class);
    public static final Property<Integer> RESTRICT_OU = Property.create("restrictOu", Integer.class);
    public static final Property<Integer> TO_ROLE_ID = Property.create("toRoleId", Integer.class);
    public static final Property<Action> ACTION = Property.create("action", Action.class);
    public static final Property<Formflow> FF = Property.create("ff", Formflow.class);
    public static final Property<Form> FORM = Property.create("form", Form.class);

    protected Integer inStatusId;
    protected Integer restrictOu;
    protected Integer toRoleId;

    protected Object action;
    protected Object ff;
    protected Object form;

    public void setInStatusId(int inStatusId) {
        beforePropertyWrite("inStatusId", this.inStatusId, inStatusId);
        this.inStatusId = inStatusId;
    }

    public int getInStatusId() {
        beforePropertyRead("inStatusId");
        if(this.inStatusId == null) {
            return 0;
        }
        return this.inStatusId;
    }

    public void setRestrictOu(int restrictOu) {
        beforePropertyWrite("restrictOu", this.restrictOu, restrictOu);
        this.restrictOu = restrictOu;
    }

    public int getRestrictOu() {
        beforePropertyRead("restrictOu");
        if(this.restrictOu == null) {
            return 0;
        }
        return this.restrictOu;
    }

    public void setToRoleId(int toRoleId) {
        beforePropertyWrite("toRoleId", this.toRoleId, toRoleId);
        this.toRoleId = toRoleId;
    }

    public int getToRoleId() {
        beforePropertyRead("toRoleId");
        if(this.toRoleId == null) {
            return 0;
        }
        return this.toRoleId;
    }

    public void setAction(Action action) {
        setToOneTarget("action", action, true);
    }

    public Action getAction() {
        return (Action)readProperty("action");
    }

    public void setFf(Formflow ff) {
        setToOneTarget("ff", ff, true);
    }

    public Formflow getFf() {
        return (Formflow)readProperty("ff");
    }

    public void setForm(Form form) {
        setToOneTarget("form", form, true);
    }

    public Form getForm() {
        return (Form)readProperty("form");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "inStatusId":
                return this.inStatusId;
            case "restrictOu":
                return this.restrictOu;
            case "toRoleId":
                return this.toRoleId;
            case "action":
                return this.action;
            case "ff":
                return this.ff;
            case "form":
                return this.form;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "inStatusId":
                this.inStatusId = (Integer)val;
                break;
            case "restrictOu":
                this.restrictOu = (Integer)val;
                break;
            case "toRoleId":
                this.toRoleId = (Integer)val;
                break;
            case "action":
                this.action = val;
                break;
            case "ff":
                this.ff = val;
                break;
            case "form":
                this.form = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.inStatusId);
        out.writeObject(this.restrictOu);
        out.writeObject(this.toRoleId);
        out.writeObject(this.action);
        out.writeObject(this.ff);
        out.writeObject(this.form);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.inStatusId = (Integer)in.readObject();
        this.restrictOu = (Integer)in.readObject();
        this.toRoleId = (Integer)in.readObject();
        this.action = in.readObject();
        this.ff = in.readObject();
        this.form = in.readObject();
    }

}
