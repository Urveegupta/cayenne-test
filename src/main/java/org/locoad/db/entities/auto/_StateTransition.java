package org.locoad.db.entities.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;
import org.locoad.db.entities.Dbrole;
import org.locoad.db.entities.Dbstatus;
import org.locoad.db.entities.Form;
import org.locoad.db.entities.Formflow;

/**
 * Class _StateTransition was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _StateTransition extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String TRANSITION_ID_PK_COLUMN = "transition_id";

    public static final Property<Boolean> RESTRICT_OU = Property.create("restrictOu", Boolean.class);
    public static final Property<Dbrole> ALLOWED_ROLE = Property.create("allowedRole", Dbrole.class);
    public static final Property<Formflow> FF = Property.create("ff", Formflow.class);
    public static final Property<Form> FORM = Property.create("form", Form.class);
    public static final Property<Dbstatus> FROM_STATUS = Property.create("fromStatus", Dbstatus.class);
    public static final Property<Dbstatus> TO_STATUS = Property.create("toStatus", Dbstatus.class);

    protected Boolean restrictOu;

    protected Object allowedRole;
    protected Object ff;
    protected Object form;
    protected Object fromStatus;
    protected Object toStatus;

    public void setRestrictOu(boolean restrictOu) {
        beforePropertyWrite("restrictOu", this.restrictOu, restrictOu);
        this.restrictOu = restrictOu;
    }

	public boolean isRestrictOu() {
        beforePropertyRead("restrictOu");
        if(this.restrictOu == null) {
            return false;
        }
        return this.restrictOu;
    }

    public void setAllowedRole(Dbrole allowedRole) {
        setToOneTarget("allowedRole", allowedRole, true);
    }

    public Dbrole getAllowedRole() {
        return (Dbrole)readProperty("allowedRole");
    }

    public void setFf(Formflow ff) {
        setToOneTarget("ff", ff, true);
    }

    public Formflow getFf() {
        return (Formflow)readProperty("ff");
    }

    public void setForm(Form form) {
        setToOneTarget("form", form, true);
    }

    public Form getForm() {
        return (Form)readProperty("form");
    }

    public void setFromStatus(Dbstatus fromStatus) {
        setToOneTarget("fromStatus", fromStatus, true);
    }

    public Dbstatus getFromStatus() {
        return (Dbstatus)readProperty("fromStatus");
    }

    public void setToStatus(Dbstatus toStatus) {
        setToOneTarget("toStatus", toStatus, true);
    }

    public Dbstatus getToStatus() {
        return (Dbstatus)readProperty("toStatus");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "restrictOu":
                return this.restrictOu;
            case "allowedRole":
                return this.allowedRole;
            case "ff":
                return this.ff;
            case "form":
                return this.form;
            case "fromStatus":
                return this.fromStatus;
            case "toStatus":
                return this.toStatus;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "restrictOu":
                this.restrictOu = (Boolean)val;
                break;
            case "allowedRole":
                this.allowedRole = val;
                break;
            case "ff":
                this.ff = val;
                break;
            case "form":
                this.form = val;
                break;
            case "fromStatus":
                this.fromStatus = val;
                break;
            case "toStatus":
                this.toStatus = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.restrictOu);
        out.writeObject(this.allowedRole);
        out.writeObject(this.ff);
        out.writeObject(this.form);
        out.writeObject(this.fromStatus);
        out.writeObject(this.toStatus);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.restrictOu = (Boolean)in.readObject();
        this.allowedRole = in.readObject();
        this.ff = in.readObject();
        this.form = in.readObject();
        this.fromStatus = in.readObject();
        this.toStatus = in.readObject();
    }

}
