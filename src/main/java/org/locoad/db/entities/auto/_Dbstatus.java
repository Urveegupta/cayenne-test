package org.locoad.db.entities.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;
import org.locoad.db.entities.Dbrole;
import org.locoad.db.entities.Formflow;
import org.locoad.db.entities.StateTransition;

/**
 * Class _Dbstatus was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Dbstatus extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String STATUS_ID_PK_COLUMN = "status_id";

    public static final Property<String> STATUS_DESCRIPTION = Property.create("statusDescription", String.class);
    public static final Property<Integer> STATUS_NAME = Property.create("statusName", Integer.class);
    public static final Property<Formflow> FF = Property.create("ff", Formflow.class);
    public static final Property<List<StateTransition>> STATE_TRANSITIONS = Property.create("stateTransitions", List.class);
    public static final Property<List<StateTransition>> STATE_TRANSITIONS1 = Property.create("stateTransitions1", List.class);
    public static final Property<Dbrole> STATUS_ROLE = Property.create("statusRole", Dbrole.class);

    protected String statusDescription;
    protected Integer statusName;

    protected Object ff;
    protected Object stateTransitions;
    protected Object stateTransitions1;
    protected Object statusRole;

    public void setStatusDescription(String statusDescription) {
        beforePropertyWrite("statusDescription", this.statusDescription, statusDescription);
        this.statusDescription = statusDescription;
    }

    public String getStatusDescription() {
        beforePropertyRead("statusDescription");
        return this.statusDescription;
    }

    public void setStatusName(int statusName) {
        beforePropertyWrite("statusName", this.statusName, statusName);
        this.statusName = statusName;
    }

    public int getStatusName() {
        beforePropertyRead("statusName");
        if(this.statusName == null) {
            return 0;
        }
        return this.statusName;
    }

    public void setFf(Formflow ff) {
        setToOneTarget("ff", ff, true);
    }

    public Formflow getFf() {
        return (Formflow)readProperty("ff");
    }

    public void addToStateTransitions(StateTransition obj) {
        addToManyTarget("stateTransitions", obj, true);
    }

    public void removeFromStateTransitions(StateTransition obj) {
        removeToManyTarget("stateTransitions", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<StateTransition> getStateTransitions() {
        return (List<StateTransition>)readProperty("stateTransitions");
    }

    public void addToStateTransitions1(StateTransition obj) {
        addToManyTarget("stateTransitions1", obj, true);
    }

    public void removeFromStateTransitions1(StateTransition obj) {
        removeToManyTarget("stateTransitions1", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<StateTransition> getStateTransitions1() {
        return (List<StateTransition>)readProperty("stateTransitions1");
    }

    public void setStatusRole(Dbrole statusRole) {
        setToOneTarget("statusRole", statusRole, true);
    }

    public Dbrole getStatusRole() {
        return (Dbrole)readProperty("statusRole");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "statusDescription":
                return this.statusDescription;
            case "statusName":
                return this.statusName;
            case "ff":
                return this.ff;
            case "stateTransitions":
                return this.stateTransitions;
            case "stateTransitions1":
                return this.stateTransitions1;
            case "statusRole":
                return this.statusRole;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "statusDescription":
                this.statusDescription = (String)val;
                break;
            case "statusName":
                this.statusName = (Integer)val;
                break;
            case "ff":
                this.ff = val;
                break;
            case "stateTransitions":
                this.stateTransitions = val;
                break;
            case "stateTransitions1":
                this.stateTransitions1 = val;
                break;
            case "statusRole":
                this.statusRole = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.statusDescription);
        out.writeObject(this.statusName);
        out.writeObject(this.ff);
        out.writeObject(this.stateTransitions);
        out.writeObject(this.stateTransitions1);
        out.writeObject(this.statusRole);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.statusDescription = (String)in.readObject();
        this.statusName = (Integer)in.readObject();
        this.ff = in.readObject();
        this.stateTransitions = in.readObject();
        this.stateTransitions1 = in.readObject();
        this.statusRole = in.readObject();
    }

}
