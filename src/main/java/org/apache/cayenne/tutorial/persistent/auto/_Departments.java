package org.apache.cayenne.tutorial.persistent.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;
import org.apache.cayenne.tutorial.persistent.DeptEmp;
import org.apache.cayenne.tutorial.persistent.DeptManager;

/**
 * Class _Departments was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Departments extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String DEPT_NO_PK_COLUMN = "dept_no";

    public static final Property<String> DEPT_NAME = Property.create("deptName", String.class);
    public static final Property<List<DeptEmp>> DEPT_EMPS = Property.create("deptEmps", List.class);
    public static final Property<List<DeptManager>> DEPT_MANAGERS = Property.create("deptManagers", List.class);

    protected String deptName;

    protected Object deptEmps;
    protected Object deptManagers;

    public void setDeptName(String deptName) {
        beforePropertyWrite("deptName", this.deptName, deptName);
        this.deptName = deptName;
    }

    public String getDeptName() {
        beforePropertyRead("deptName");
        return this.deptName;
    }

    public void addToDeptEmps(DeptEmp obj) {
        addToManyTarget("deptEmps", obj, true);
    }

    public void removeFromDeptEmps(DeptEmp obj) {
        removeToManyTarget("deptEmps", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<DeptEmp> getDeptEmps() {
        return (List<DeptEmp>)readProperty("deptEmps");
    }

    public void addToDeptManagers(DeptManager obj) {
        addToManyTarget("deptManagers", obj, true);
    }

    public void removeFromDeptManagers(DeptManager obj) {
        removeToManyTarget("deptManagers", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<DeptManager> getDeptManagers() {
        return (List<DeptManager>)readProperty("deptManagers");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "deptName":
                return this.deptName;
            case "deptEmps":
                return this.deptEmps;
            case "deptManagers":
                return this.deptManagers;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "deptName":
                this.deptName = (String)val;
                break;
            case "deptEmps":
                this.deptEmps = val;
                break;
            case "deptManagers":
                this.deptManagers = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.deptName);
        out.writeObject(this.deptEmps);
        out.writeObject(this.deptManagers);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.deptName = (String)in.readObject();
        this.deptEmps = in.readObject();
        this.deptManagers = in.readObject();
    }

}
